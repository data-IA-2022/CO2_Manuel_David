from sqlalchemy import (
    Table, 
    Column, 
    Integer, 
    String, 
    MetaData, 
    Float, 
    Boolean, 
    SmallInteger,
    Text
)
def create_table(engine):
    meta = MetaData()

    buildings = Table(
        'buildings', meta,
        Column('OSEBuildingID', String(length=50226), primary_key=True),
        Column('DataYear', SmallInteger),
        Column('BuildingType', String(length=20)),
        Column('PrimaryPropertyType', String(length=27)),
        Column('PropertyName', String(length=72)),
        Column('Address', String(length=41)),
        Column('City', String(length=7)),
        Column('State', String(length=2)),
        Column('ZipCode', Integer),
        Column('TaxParcelIdentificationNumber', String(length=25)),
        Column('CouncilDistrictCode', SmallInteger),
        Column('Neighborhood', String(length=22)),
        Column('Latitude', Float),
        Column('Longitude', Float),
        Column('YearBuilt', SmallInteger),
        Column('NumberofBuildings', SmallInteger),
        Column('NumberofFloors', SmallInteger),
        Column('PropertyGFATotal', Integer),
        Column('PropertyGFAParking', Integer),
        Column('PropertyGFABuildings', Integer),
        Column('ListOfAllPropertyUseTypes', String(length=255)),
        Column('LargestPropertyUseType', String(length=52)),
        Column('LargestPropertyUseTypeGFA', Float),
        Column('SecondLargestPropertyUseType', String(length=52)),
        Column('SecondLargestPropertyUseTypeGFA', Float),
        Column('ThirdLargestPropertyUseType', String(length=52)),
        Column('ThirdLargestPropertyUseTypeGFA', Float),
        Column('YearsENERGYSTARCertified', String(length=60)),
        Column('ENERGYSTARScore', SmallInteger),
        Column('SiteEUI', Float),
        Column('SiteEUIWN', Float),
        Column('SourceEUI', Float),
        Column('SourceEUIWN', Float),
        Column('SiteEnergyUse', Float),
        Column('SiteEnergyUseWN', Float),
        Column('SteamUse', Float),
        Column('Electricity_kWh', Float),
        Column('Electricity_kBtu', Float),
        Column('NaturalGas_therms', Float),
        Column('NaturalGas_kBtu', Float),
        Column('DefaultData', Boolean),
        Column('Comments', Text),
        Column('ComplianceStatus', String(length=28)),
        Column('Outlier', String(length=12)),
        Column('TotalGHGEmissions', Float),
        Column('GHGEmissionsIntensity', Float)
    )

    meta.create_all(engine)
